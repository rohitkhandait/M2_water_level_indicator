
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079f  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c6  00000000  00000000  00000b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e7  00000000  00000000  00001209  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  000018fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000019db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
static volatile int i=0;


int main(void)
{	
	DDRB = 0xFF;         //PB as output
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTB= 0x00;         //keep all LEDs off
  94:	15 b8       	out	0x05, r1	; 5
    DDRD=0b11111011;
  96:	8b ef       	ldi	r24, 0xFB	; 251
  98:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0xc>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x12>
	_delay_us(50);
	EIMSK|=(1<<INT0);
  a2:	8d b3       	in	r24, 0x1d	; 29
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8d bb       	out	0x1d, r24	; 29
	MCUCR|=(1<<ISC00);
  a8:	85 b7       	in	r24, 0x35	; 53
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	85 bf       	out	0x35, r24	; 53
	int16_t COUNTA = 0;
	sei();
  ae:	78 94       	sei
	
    while (1) 
    {
		PORTD|=(1<<PIND0);
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x28>
		_delay_us(15);
		PORTD &=~(1<<PIND0);
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	8b b9       	out	0x0b, r24	; 11
		COUNTA =pulse/58;
  c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pulse>
  c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pulse+0x1>
  ca:	6a e3       	ldi	r22, 0x3A	; 58
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	0e 94 24 01 	call	0x248	; 0x248 <__divmodhi4>
		if (COUNTA <= 0.5)
  d2:	07 2e       	mov	r0, r23
  d4:	00 0c       	add	r0, r0
  d6:	88 0b       	sbc	r24, r24
  d8:	99 0b       	sbc	r25, r25
  da:	0e 94 c5 00 	call	0x18a	; 0x18a <__floatsisf>
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	5f e3       	ldi	r21, 0x3F	; 63
  e6:	0e 94 be 00 	call	0x17c	; 0x17c <__cmpsf2>
  ea:	18 16       	cp	r1, r24
  ec:	3c f0       	brlt	.+14     	; 0xfc <main+0x6c>
		{
			PORTB &=(~(1 <<PINB5));     
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	85 b9       	out	0x05, r24	; 5
			PORTB|=(1<<PINB4);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	da cf       	rjmp	.-76     	; 0xb0 <main+0x20>
			
			
		}
		else 
		{
			PORTB &=(~(1 <<PINB4));      
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	85 b9       	out	0x05, r24	; 5
			PORTB|=(1<<PINB5);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	80 62       	ori	r24, 0x20	; 32
 106:	85 b9       	out	0x05, r24	; 5
 108:	d3 cf       	rjmp	.-90     	; 0xb0 <main+0x20>

0000010a <__vector_1>:
		}
		
    }
}
ISR(INT0_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	if (i==1)
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	81 f4       	brne	.+32     	; 0x148 <__vector_1+0x3e>
	{
		TCCR1B=0;
 128:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		pulse=TCNT1;
 12c:	e4 e8       	ldi	r30, 0x84	; 132
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	91 81       	ldd	r25, Z+1	; 0x01
 134:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pulse+0x1>
 138:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pulse>
		TCNT1=0;
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
		i=0;
 140:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if (i==0)
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	89 2b       	or	r24, r25
 152:	59 f4       	brne	.+22     	; 0x16a <__vector_1+0x60>
	{
		TCCR1B|=(1<<CS10);
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24
		i=1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__cmpsf2>:
 17c:	0e 94 00 01 	call	0x200	; 0x200 <__fp_cmp>
 180:	08 f4       	brcc	.+2      	; 0x184 <__cmpsf2+0x8>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	08 95       	ret

00000186 <__floatunsisf>:
 186:	e8 94       	clt
 188:	09 c0       	rjmp	.+18     	; 0x19c <__floatsisf+0x12>

0000018a <__floatsisf>:
 18a:	97 fb       	bst	r25, 7
 18c:	3e f4       	brtc	.+14     	; 0x19c <__floatsisf+0x12>
 18e:	90 95       	com	r25
 190:	80 95       	com	r24
 192:	70 95       	com	r23
 194:	61 95       	neg	r22
 196:	7f 4f       	sbci	r23, 0xFF	; 255
 198:	8f 4f       	sbci	r24, 0xFF	; 255
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	99 23       	and	r25, r25
 19e:	a9 f0       	breq	.+42     	; 0x1ca <__floatsisf+0x40>
 1a0:	f9 2f       	mov	r31, r25
 1a2:	96 e9       	ldi	r25, 0x96	; 150
 1a4:	bb 27       	eor	r27, r27
 1a6:	93 95       	inc	r25
 1a8:	f6 95       	lsr	r31
 1aa:	87 95       	ror	r24
 1ac:	77 95       	ror	r23
 1ae:	67 95       	ror	r22
 1b0:	b7 95       	ror	r27
 1b2:	f1 11       	cpse	r31, r1
 1b4:	f8 cf       	rjmp	.-16     	; 0x1a6 <__floatsisf+0x1c>
 1b6:	fa f4       	brpl	.+62     	; 0x1f6 <__floatsisf+0x6c>
 1b8:	bb 0f       	add	r27, r27
 1ba:	11 f4       	brne	.+4      	; 0x1c0 <__floatsisf+0x36>
 1bc:	60 ff       	sbrs	r22, 0
 1be:	1b c0       	rjmp	.+54     	; 0x1f6 <__floatsisf+0x6c>
 1c0:	6f 5f       	subi	r22, 0xFF	; 255
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	8f 4f       	sbci	r24, 0xFF	; 255
 1c6:	9f 4f       	sbci	r25, 0xFF	; 255
 1c8:	16 c0       	rjmp	.+44     	; 0x1f6 <__floatsisf+0x6c>
 1ca:	88 23       	and	r24, r24
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <__floatsisf+0x48>
 1ce:	96 e9       	ldi	r25, 0x96	; 150
 1d0:	11 c0       	rjmp	.+34     	; 0x1f4 <__floatsisf+0x6a>
 1d2:	77 23       	and	r23, r23
 1d4:	21 f0       	breq	.+8      	; 0x1de <__floatsisf+0x54>
 1d6:	9e e8       	ldi	r25, 0x8E	; 142
 1d8:	87 2f       	mov	r24, r23
 1da:	76 2f       	mov	r23, r22
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <__floatsisf+0x5e>
 1de:	66 23       	and	r22, r22
 1e0:	71 f0       	breq	.+28     	; 0x1fe <__floatsisf+0x74>
 1e2:	96 e8       	ldi	r25, 0x86	; 134
 1e4:	86 2f       	mov	r24, r22
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	2a f0       	brmi	.+10     	; 0x1f6 <__floatsisf+0x6c>
 1ec:	9a 95       	dec	r25
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	88 1f       	adc	r24, r24
 1f4:	da f7       	brpl	.-10     	; 0x1ec <__floatsisf+0x62>
 1f6:	88 0f       	add	r24, r24
 1f8:	96 95       	lsr	r25
 1fa:	87 95       	ror	r24
 1fc:	97 f9       	bld	r25, 7
 1fe:	08 95       	ret

00000200 <__fp_cmp>:
 200:	99 0f       	add	r25, r25
 202:	00 08       	sbc	r0, r0
 204:	55 0f       	add	r21, r21
 206:	aa 0b       	sbc	r26, r26
 208:	e0 e8       	ldi	r30, 0x80	; 128
 20a:	fe ef       	ldi	r31, 0xFE	; 254
 20c:	16 16       	cp	r1, r22
 20e:	17 06       	cpc	r1, r23
 210:	e8 07       	cpc	r30, r24
 212:	f9 07       	cpc	r31, r25
 214:	c0 f0       	brcs	.+48     	; 0x246 <__fp_cmp+0x46>
 216:	12 16       	cp	r1, r18
 218:	13 06       	cpc	r1, r19
 21a:	e4 07       	cpc	r30, r20
 21c:	f5 07       	cpc	r31, r21
 21e:	98 f0       	brcs	.+38     	; 0x246 <__fp_cmp+0x46>
 220:	62 1b       	sub	r22, r18
 222:	73 0b       	sbc	r23, r19
 224:	84 0b       	sbc	r24, r20
 226:	95 0b       	sbc	r25, r21
 228:	39 f4       	brne	.+14     	; 0x238 <__fp_cmp+0x38>
 22a:	0a 26       	eor	r0, r26
 22c:	61 f0       	breq	.+24     	; 0x246 <__fp_cmp+0x46>
 22e:	23 2b       	or	r18, r19
 230:	24 2b       	or	r18, r20
 232:	25 2b       	or	r18, r21
 234:	21 f4       	brne	.+8      	; 0x23e <__fp_cmp+0x3e>
 236:	08 95       	ret
 238:	0a 26       	eor	r0, r26
 23a:	09 f4       	brne	.+2      	; 0x23e <__fp_cmp+0x3e>
 23c:	a1 40       	sbci	r26, 0x01	; 1
 23e:	a6 95       	lsr	r26
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	81 1d       	adc	r24, r1
 244:	81 1d       	adc	r24, r1
 246:	08 95       	ret

00000248 <__divmodhi4>:
 248:	97 fb       	bst	r25, 7
 24a:	07 2e       	mov	r0, r23
 24c:	16 f4       	brtc	.+4      	; 0x252 <__divmodhi4+0xa>
 24e:	00 94       	com	r0
 250:	07 d0       	rcall	.+14     	; 0x260 <__divmodhi4_neg1>
 252:	77 fd       	sbrc	r23, 7
 254:	09 d0       	rcall	.+18     	; 0x268 <__divmodhi4_neg2>
 256:	0e 94 38 01 	call	0x270	; 0x270 <__udivmodhi4>
 25a:	07 fc       	sbrc	r0, 7
 25c:	05 d0       	rcall	.+10     	; 0x268 <__divmodhi4_neg2>
 25e:	3e f4       	brtc	.+14     	; 0x26e <__divmodhi4_exit>

00000260 <__divmodhi4_neg1>:
 260:	90 95       	com	r25
 262:	81 95       	neg	r24
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	08 95       	ret

00000268 <__divmodhi4_neg2>:
 268:	70 95       	com	r23
 26a:	61 95       	neg	r22
 26c:	7f 4f       	sbci	r23, 0xFF	; 255

0000026e <__divmodhi4_exit>:
 26e:	08 95       	ret

00000270 <__udivmodhi4>:
 270:	aa 1b       	sub	r26, r26
 272:	bb 1b       	sub	r27, r27
 274:	51 e1       	ldi	r21, 0x11	; 17
 276:	07 c0       	rjmp	.+14     	; 0x286 <__udivmodhi4_ep>

00000278 <__udivmodhi4_loop>:
 278:	aa 1f       	adc	r26, r26
 27a:	bb 1f       	adc	r27, r27
 27c:	a6 17       	cp	r26, r22
 27e:	b7 07       	cpc	r27, r23
 280:	10 f0       	brcs	.+4      	; 0x286 <__udivmodhi4_ep>
 282:	a6 1b       	sub	r26, r22
 284:	b7 0b       	sbc	r27, r23

00000286 <__udivmodhi4_ep>:
 286:	88 1f       	adc	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	5a 95       	dec	r21
 28c:	a9 f7       	brne	.-22     	; 0x278 <__udivmodhi4_loop>
 28e:	80 95       	com	r24
 290:	90 95       	com	r25
 292:	bc 01       	movw	r22, r24
 294:	cd 01       	movw	r24, r26
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
